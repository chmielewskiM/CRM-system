swagger: '2.0'
info:
  title: CRM API
  version: v2
paths:
  /Contacts:
    get:
      tags:
        - Contacts
      summary: Returns the list with contacts.
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: query
          name: inProcess
          type: boolean
          description: "if true, returns contacts which are currently involved in some sale process"
        - in: query
          name: premium
          type: boolean
          description: "if true, returns contacts with premium membership"
        - in: query
          name: orderBy
          type: string
          description: "determines how returned data should be sorted"
        - in: query
          name: activePage
          type: integer
          format: int32
          description: "active page of paginated list"
        - in: query
          name: pageSize
          type: integer
          format: int32
          description: "count of contacts returned per page"
        - in: query
          name: filterInput
          type: string
          description: "text typed in search input"
        - in: query
          name: uncontracted
          type: boolean
          description: "if true, returns contacts which haven''t any open order assigned"
      responses:
        '200':
          description: Returns the list.
          schema:
            $ref: '#/definitions/Application.Contacts.CompleteContactsDataViewModel'
        '500':
          description: Server error.
    post:
      tags:
        - Contacts
      summary: Adds a contact to the collection.
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Application.Contacts.ContactViewModel'
      responses:
        '204':
          description: Contact added successfully.
        '400':
          description: This name is already taken.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '500':
          description: Problem saving changes.
  '/Contacts/name/{name}':
    get:
      tags:
        - Contacts
      summary: Returns a contact by requested name.
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: path
          name: name
          required: true
          type: string
          description: "requested contact's name"
      responses:
        '200':
          description: Returns a contact.
          schema:
            $ref: '#/definitions/Application.Contacts.ContactViewModel'
        '404':
          description: Contact not found.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '500':
          description: Server error.
  '/Contacts/{id}':
    get:
      tags:
        - Contacts
      summary: Returns details about contact.
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: path
          name: id
          required: true
          type: string
          format: uuid
          description: "requested contact's id"
      responses:
        '200':
          description: Returns details about the contact.
          schema:
            $ref: '#/definitions/Application.Contacts.ContactViewModel'
        '404':
          description: Contact not found.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '500':
          description: Server error.
    post:
      tags:
        - Contacts
      summary: Starts sale process.
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: path
          name: id
          required: true
          type: string
          format: uuid
          description: "requested contact's id"
      responses:
        '204':
          description: Starts sale process.
        '404':
          description: Contact not found.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '500':
          description: Problem saving changes.
    put:
      tags:
        - Contacts
      summary: Updates a contact.
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: "requested contact's id"
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Application.Contacts.ContactViewModel'
      responses:
        '204':
          description: Contact edited successfully.
        '404':
          description: Contact not found.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '500':
          description: Problem saving changes.
    delete:
      tags:
        - Contacts
      summary: Deletes a contact entirely.
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: path
          name: id
          required: true
          type: string
          format: uuid
          description: "contact's id"
      responses:
        '204':
          description: Contact deleted successfully.
        '404':
          description: Contact not found.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '500':
          description: Problem saving changes.
  '/Contacts/upgrade/{id}':
    post:
      tags:
        - Contacts
      summary: Changes the status of contact's membership.
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: path
          name: id
          required: true
          type: string
          format: uuid
          description: "contact's id"
      responses:
        '204':
          description: Status changed successfully.
        '404':
          description: Contact not found.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '500':
          description: Problem saving changes.
  '/Contacts/remove/{id}':
    delete:
      tags:
        - Contacts
      summary: "When user 'deletes' the contact, in fact he unshares it. The relation between user and\r\ncontact is erased, but the contact is kept in the DB and is still visible for users\r\nwho have top level access (admins)."
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: path
          name: id
          required: true
          type: string
          format: uuid
          description: "contact's id"
      responses:
        '204':
          description: Contact removed successfully.
        '400':
          description: Some active order is assigned to contact.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '404':
          description: Contact not found.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '500':
          description: Problem saving changes.
  /DelegatedTasks:
    get:
      tags:
        - DelegatedTasks
      summary: Returns list with tasks.
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: query
          name: myTasks
          type: boolean
          description: "if true, returns tasks that were created by user sending the request"
        - in: query
          name: sharedTasks
          type: boolean
          description: "if true, returns shared tasks"
        - in: query
          name: accepted
          type: boolean
          description: "if true, returns accepted tasks"
        - in: query
          name: refused
          type: boolean
          description: "if true, returns refused tasks"
        - in: query
          name: done
          type: boolean
          description: "if true, returns done tasks"
        - in: query
          name: activePage
          type: integer
          format: int32
          description: "active page of paginated list"
        - in: query
          name: pageSize
          type: integer
          format: int32
          description: "count of tasks returned per page"
      responses:
        '200':
          description: Returns the list
          schema:
            $ref: '#/definitions/Application.DelegatedTasks.CompleteTasksDataViewModel'
        '500':
          description: Server error.
    post:
      tags:
        - DelegatedTasks
      summary: Adds the task.
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Application.DelegatedTasks.DelegatedTaskViewModel'
      responses:
        '204':
          description: Adds the task.
        '400':
          description: Failed validation (fluent validation).
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '500':
          description: Problem saving changes.
  '/DelegatedTasks/pending/page{pendingActivePage}=size{pendingPageSize}':
    get:
      tags:
        - DelegatedTasks
      summary: Returns list with pending tasks and their count.
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: path
          name: pendingActivePage
          required: true
          type: integer
          format: int32
          description: "active page of paginated list with received tasks"
        - in: path
          name: pendingPageSize
          required: true
          type: integer
          format: int32
          description: "size of the paginated list's page"
      responses:
        '200':
          description: Returns list with tasks count.
          schema:
            $ref: '#/definitions/Application.DelegatedTasks.CompleteTasksDataViewModel'
        '500':
          description: Server error.
  '/DelegatedTasks/{id}':
    get:
      tags:
        - DelegatedTasks
      summary: Returns details about the task.
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: path
          name: id
          required: true
          type: string
          format: uuid
          description: "task id"
      responses:
        '200':
          description: Returns details about the task.
          schema:
            $ref: '#/definitions/Application.DelegatedTasks.DelegatedTaskViewModel'
        '404':
          description: Task not found.
        '500':
          description: Server error.
    put:
      tags:
        - DelegatedTasks
      summary: Edits the task.
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: "task id"
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Application.DelegatedTasks.DelegatedTaskViewModel'
      responses:
        '204':
          description: Task edited successfully.
        '400':
          description: Failed validation (fluent validation).
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '404':
          description: Task not found.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '500':
          description: Problem saving changes.
    delete:
      tags:
        - DelegatedTasks
      summary: Deletes the task.
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: path
          name: id
          required: true
          type: string
          format: uuid
          description: "task id"
      responses:
        '204':
          description: Task deleted successfully.
        '404':
          description: Task not found.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '500':
          description: Problem saving changes.
  '/DelegatedTasks/{id}/share/{username}':
    post:
      tags:
        - DelegatedTasks
      summary: Shares the task with other user.
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: path
          name: id
          required: true
          type: string
          format: uuid
          description: "task id"
        - in: path
          name: username
          required: true
          type: string
          description: "username of the user to share task with"
      responses:
        '204':
          description: Task deleted successfully.
        '400':
          description: The task is shared already.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '404':
          description: User to share with not found.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '500':
          description: Problem saving changes.
  '/DelegatedTasks/accept/{id}':
    post:
      tags:
        - DelegatedTasks
      summary: Accepts shared task.
      parameters:
        - in: path
          name: id
          required: true
          type: string
          format: uuid
          description: "task id"
      responses:
        '200':
          description: Success
        '204':
          description: Task accepted.
        '404':
          description: Task not found.
        '500':
          description: Problem saving changes.
  '/DelegatedTasks/refuse/{id}':
    post:
      tags:
        - DelegatedTasks
      summary: Refuses shared task.
      parameters:
        - in: path
          name: id
          required: true
          type: string
          format: uuid
          description: "task id"
      responses:
        '200':
          description: Success
        '204':
          description: Task refused.
        '404':
          description: Task not found.
        '500':
          description: Problem saving changes.
  '/DelegatedTasks/finish/{id}':
    post:
      tags:
        - DelegatedTasks
      summary: Closes shared task.
      parameters:
        - in: path
          name: id
          required: true
          type: string
          format: uuid
          description: "task id"
      responses:
        '200':
          description: Success
        '204':
          description: Task closed successfully.
        '404':
          description: Task not found.
        '500':
          description: Problem saving changes.
  /Leads:
    get:
      tags:
        - Leads
      summary: Returns list with leads.
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: query
          name: allLeads
          type: boolean
          description: "return all leads"
        - in: query
          name: status
          type: string
          description: "return only leads with requested status"
        - in: query
          name: sortBy
          type: string
          description: "sort leads by name or last operation date"
      responses:
        '200':
          description: Returns list with leads.
          schema:
            type: array
            items:
              $ref: '#/definitions/Application.Leads.ViewModels.LeadViewModel'
        '500':
          description: Server error.
    post:
      tags:
        - Leads
      summary: Adds a lead.
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Application.Leads.ViewModels.LeadViewModel'
      responses:
        '204':
          description: Lead added to collection successfully.
        '400':
          description: This name is already taken.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '500':
          description: Problem saving changes.
  '/Leads/{id}':
    get:
      tags:
        - Leads
      summary: Returns details about lead.
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: path
          name: id
          required: true
          type: string
          format: uuid
          description: "lead's id"
      responses:
        '200':
          description: Returns details about lead.
        '204':
          description: Success
        '404':
          description: Lead not found.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '500':
          description: Server error.
  '/Leads/{id}={upgrade}':
    put:
      tags:
        - Leads
      summary: Changes lead's status.
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: path
          name: id
          required: true
          type: string
          format: uuid
          description: "lead's id"
        - in: path
          name: upgrade
          required: true
          type: boolean
          description: "upgrade/downgrade lead's status"
      responses:
        '204':
          description: Status changed successfully.
        '400':
          description: Can not downgrade lead whose order was finalized.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '404':
          description: Lead not found.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '500':
          description: Problem saving changes.
  /Leads/abandon:
    delete:
      tags:
        - Leads
      summary: Terminates sale process.
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: query
          name: id
          type: string
          format: uuid
          description: "lead's id"
        - in: query
          name: saveContact
          type: boolean
          description: "if true, keeps contact in contacts"
        - in: query
          name: keepRecords
          type: boolean
          description: "if true, keeps operations registered during this sale process"
      responses:
        '204':
          description: Sale process erased successfully.
        '400':
          description: Delete or close the order before cancelling this process.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '404':
          description: Lead not found.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '500':
          description: Problem saving changes.
  /Operations:
    get:
      tags:
        - Operations
      summary: Returns all operations.
      produces:
        - text/plain
        - application/json
        - text/json
      responses:
        '200':
          description: Returns all operations.
          schema:
            $ref: '#/definitions/Application.Operations.ViewModels.CompleteStatsViewModel'
        '500':
          description: Server error.
  /Operations/count:
    get:
      tags:
        - Operations
      summary: Returns count of all operations.
      produces:
        - text/plain
        - application/json
        - text/json
      responses:
        '200':
          description: Returns operations count.
          schema:
            format: int32
            type: integer
        '500':
          description: Server error.
  /Orders:
    get:
      tags:
        - Orders
      summary: Returns list with orders.
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: query
          name: allOrders
          type: string
          description: "returns all orders"
        - in: query
          name: saleOrders
          type: string
          description: "if true, returns only sale orders, else only purchase orders"
        - in: query
          name: closedOrders
          type: string
          description: "returns closed orders"
        - in: query
          name: orderBy
          type: string
          description: "determines how requested orders should be sorted"
        - in: query
          name: filterInput
          type: string
          description: "search input, returns records which contain input''s content"
        - in: query
          name: pageNumber
          type: integer
          format: int32
          description: "active page of paginated history"
        - in: query
          name: pageSize
          type: integer
          format: int32
          description: "count of orders which are returned per history page"
      responses:
        '200':
          description: Returns list with orders.
          schema:
            $ref: '#/definitions/Application.Orders.ViewModels.CompleteOrderDataViewModel'
        '500':
          description: Server error.
    post:
      tags:
        - Orders
      summary: Adds an order.
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Application.Orders.ViewModels.OrderViewModel'
      responses:
        '201':
          description: Success
        '204':
          description: Order added successfully.
        '400':
          description: Failed validation (fluent validation).
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '404':
          description: Client not found.
        '500':
          description: Problem saving changes.
  '/Orders/{id}':
    put:
      tags:
        - Orders
      summary: Edits an order.
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: "order id"
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Application.Orders.ViewModels.OrderViewModel'
      responses:
        '204':
          description: Order updated successfully.
        '400':
          description: Failed validation (fluent validation).
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '404':
          description: Order not found.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '500':
          description: Problem saving changes.
    delete:
      tags:
        - Orders
      summary: Deletes an order.
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: path
          name: id
          required: true
          type: string
          format: uuid
          description: "order id"
      responses:
        '204':
          description: Order deleted successfully.
        '400':
          description: Can not delete an order which is assigned to lead with 'Invoice' status.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '404':
          description: Client assigned to order not found.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '500':
          description: Server error.
  '/Orders/close/{id}':
    put:
      tags:
        - Orders
      summary: Closes an order.
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: path
          name: id
          required: true
          type: string
          format: uuid
          description: "order id"
      responses:
        '204':
          description: Order closed successfully.
        '404':
          description: Order not found.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '500':
          description: Problem saving changes.
  /Users:
    get:
      tags:
        - Users
      summary: Return list with users.
      produces:
        - text/plain
        - application/json
        - text/json
      responses:
        '200':
          description: Returns list with users.
          schema:
            type: array
            items:
              $ref: '#/definitions/Application.Users.ViewModels.UserViewModel'
        '500':
          description: Server error.
  /Users/logged:
    get:
      tags:
        - Users
      summary: Returns logged user.
      produces:
        - text/plain
        - application/json
        - text/json
      responses:
        '200':
          description: Returns logged user.
          schema:
            $ref: '#/definitions/Application.Users.ViewModels.UserViewModel'
        '500':
          description: Server error.
  '/Users/user/{username}':
    get:
      tags:
        - Users
      summary: Returns an user.
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: path
          name: username
          required: true
          type: string
          description: "user's username"
      responses:
        '200':
          description: Returns an user.
          schema:
            $ref: '#/definitions/Application.Users.ViewModels.UserViewModel'
        '404':
          description: User not found.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '500':
          description: Server error.
  /Users/login:
    post:
      tags:
        - Users
      summary: Logs user in.
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Application.Users.ViewModels.LoggingUserViewModel'
      responses:
        '200':
          description: User logged in.
          schema:
            $ref: '#/definitions/Application.Users.ViewModels.UserViewModel'
        '404':
          description: User not found.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '500':
          description: Server error.
  /Users/register:
    post:
      tags:
        - Users
      summary: Registers an user.
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Application.Users.ViewModels.UserViewModel'
      responses:
        '204':
          description: Registers an user.
        '404':
          description: Username/email already exists.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '500':
          description: Problem creating user.
  '/Users/update/{id}':
    put:
      tags:
        - Users
      summary: Updates an user.
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: "user's id"
        - in: body
          name: body
          schema:
            $ref: '#/definitions/Application.Users.ViewModels.UserViewModel'
      responses:
        '204':
          description: User updated.
        '404':
          description: User not found.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '500':
          description: Problem saving changes.
  '/Users/{username}':
    delete:
      tags:
        - Users
      summary: Deletes an user.
      produces:
        - text/plain
        - application/json
        - text/json
      parameters:
        - in: path
          name: username
          required: true
          type: string
          description: "user's username"
      responses:
        '204':
          description: User deleted successfully.
        '404':
          description: User not found.
          schema:
            $ref: '#/definitions/Microsoft.AspNetCore.Mvc.ProblemDetails'
        '500':
          description: Failed to delete user.
definitions:
  Application.Contacts.CompleteContactsDataViewModel:
    type: object
    properties:
      contacts:
        type: array
        items:
          $ref: '#/definitions/Application.Contacts.ContactViewModel'
      contactsTotal:
        format: int32
        type: integer
  Application.Contacts.ContactViewModel:
    type: object
    properties:
      id:
        format: uuid
        type: string
      name:
        type: string
      type:
        type: string
      company:
        type: string
      phoneNumber:
        type: string
      email:
        type: string
      dateAdded:
        format: date-time
        type: string
      notes:
        type: string
      status:
        type: string
      successfulDeals:
        format: int32
        type: integer
      source:
        type: string
      premium:
        type: boolean
      userContacts:
        type: array
        items:
          $ref: '#/definitions/Application.Contacts.ViewModels.UserAccessViewModel'
      orders:
        type: array
        items:
          $ref: '#/definitions/Application.Orders.ViewModels.OrderViewModel'
  Application.Contacts.ViewModels.UserAccessViewModel:
    type: object
    properties:
      username:
        type: string
      displayName:
        type: string
      level:
        type: string
  Application.DelegatedTasks.CompleteTasksDataViewModel:
    type: object
    properties:
      tasks:
        type: array
        items:
          $ref: '#/definitions/Application.DelegatedTasks.DelegatedTaskViewModel'
      tasksCount:
        format: int32
        type: integer
  Application.DelegatedTasks.DelegatedTaskViewModel:
    type: object
    properties:
      id:
        format: uuid
        type: string
      type:
        type: string
      dateStarted:
        format: date-time
        type: string
      deadline:
        format: date-time
        type: string
      notes:
        type: string
      finishedBy:
        type: string
      accepted:
        type: boolean
      refused:
        type: boolean
      pending:
        type: boolean
      done:
        type: boolean
      userTask:
        $ref: '#/definitions/Application.DelegatedTasks.UserAccessViewModel'
  Application.DelegatedTasks.UserAccessViewModel:
    type: object
    properties:
      createdByUsername:
        type: string
      createdBy:
        type: string
      sharedWithUsername:
        type: string
      sharedWith:
        type: string
  Application.Leads.ViewModels.LeadViewModel:
    type: object
    properties:
      lastOperationDate:
        format: date-time
        type: string
      contact:
        $ref: '#/definitions/Application.Contacts.ContactViewModel'
      order:
        $ref: '#/definitions/Application.Orders.ViewModels.OrderViewModel'
  Application.Operations.TotalsViewModel:
    type: object
    properties:
      leadsTotal:
        format: int32
        type: integer
      opportunitiesTotal:
        format: int32
        type: integer
      quotesTotal:
        format: int32
        type: integer
      invoicesTotal:
        format: int32
        type: integer
      conversionsTotal:
        format: int32
        type: integer
      ordersTotal:
        format: int32
        type: integer
      revenueTotal:
        format: double
        type: number
      sourcesTotal:
        $ref: '#/definitions/Application.Operations.ViewModels.SourcesViewModel'
  Application.Operations.ViewModels.CollectedOperationDataViewModel:
    type: object
    properties:
      leads:
        format: int32
        type: integer
      opportunities:
        format: int32
        type: integer
      quotes:
        format: int32
        type: integer
      invoices:
        format: int32
        type: integer
      conversions:
        format: int32
        type: integer
      orders:
        format: int32
        type: integer
      revenue:
        format: double
        type: number
      sources:
        $ref: '#/definitions/Application.Operations.ViewModels.SourcesViewModel'
      dateStart:
        format: date-time
        type: string
      dateEnd:
        format: date-time
        type: string
  Application.Operations.ViewModels.CompleteStatsViewModel:
    type: object
    properties:
      thisMonthTotals:
        $ref: '#/definitions/Application.Operations.TotalsViewModel'
      oneMonthTotals:
        $ref: '#/definitions/Application.Operations.TotalsViewModel'
      sixMonthsTotals:
        $ref: '#/definitions/Application.Operations.TotalsViewModel'
      thisMonthData:
        type: array
        items:
          $ref: '#/definitions/Application.Operations.ViewModels.CollectedOperationDataViewModel'
      oneMonthData:
        type: array
        items:
          $ref: '#/definitions/Application.Operations.ViewModels.CollectedOperationDataViewModel'
      sixMonthsData:
        type: array
        items:
          $ref: '#/definitions/Application.Operations.ViewModels.CollectedOperationDataViewModel'
      oneMonthOpportunitiesByUser:
        type: array
        items:
          $ref: '#/definitions/Application.Operations.ViewModels.OpportunitiesByUserViewModel'
      sixMonthsOpportunitiesByUser:
        type: array
        items:
          $ref: '#/definitions/Application.Operations.ViewModels.OpportunitiesByUserViewModel'
  Application.Operations.ViewModels.OpportunitiesByUserViewModel:
    type: object
    properties:
      userDisplayName:
        type: string
      leadsTotal:
        format: int32
        type: integer
      opportunitiesTotal:
        format: int32
        type: integer
  Application.Operations.ViewModels.SourcesViewModel:
    type: object
    properties:
      web:
        format: int32
        type: integer
      socialMedia:
        format: int32
        type: integer
      flyers:
        format: int32
        type: integer
      commercial:
        format: int32
        type: integer
      formerClient:
        format: int32
        type: integer
  Application.Orders.ViewModels.CompleteOrderDataViewModel:
    type: object
    properties:
      orders:
        type: array
        items:
          $ref: '#/definitions/Application.Orders.ViewModels.OrderViewModel'
      ordersCount:
        format: int32
        type: integer
  Application.Orders.ViewModels.OrderViewModel:
    type: object
    properties:
      id:
        format: uuid
        type: string
      orderNumber:
        format: int32
        type: integer
      clientName:
        type: string
      type:
        type: boolean
      closed:
        type: boolean
      product:
        type: string
      amount:
        format: double
        type: number
      price:
        format: double
        type: number
      dateOrderOpened:
        format: date-time
        type: string
      dateOrderClosed:
        format: date-time
        type: string
      notes:
        type: string
  Application.Users.ViewModels.LoggingUserViewModel:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
  Application.Users.ViewModels.UserViewModel:
    type: object
    properties:
      id:
        type: string
      displayName:
        type: string
      token:
        type: string
      username:
        type: string
      level:
        type: string
      email:
        type: string
      password:
        type: string
  Microsoft.AspNetCore.Mvc.ProblemDetails:
    type: object
    properties:
      type:
        type: string
      title:
        type: string
      status:
        format: int32
        type: integer
      detail:
        type: string
      instance:
        type: string
    additionalProperties: {}
